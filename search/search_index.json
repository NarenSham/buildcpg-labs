{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"BuildCPG Labs","text":"<p>A modern, scalable data engineering platform for managing multiple independent labs using dbt, DuckDB, and Python.</p>"},{"location":"#overview","title":"Overview","text":"<p>BuildCPG Labs enables you to:</p> <ul> <li>Run independent labs - Each lab has its own database and data, shares Python environment</li> <li>Share utilities - Common code used by all labs without duplication</li> <li>Scale easily - Create new labs in minutes (with shared dependencies)</li> <li>Maintain quality - Built-in data inspection and quality checks</li> <li>Work efficiently - Single venv, manual profile switching for simplicity</li> </ul>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#multi-lab-architecture-with-shared-environment","title":"Multi-Lab Architecture with Shared Environment","text":"<p>Each lab is data-independent but shares the Python environment:</p> <pre><code>buildcpg-labs/\n\u251c\u2500\u2500 .venv/                      # SINGLE venv (shared by all labs)\n\u251c\u2500\u2500 shared/                     # Reusable utilities (used by ALL labs)\n\u2502   \u251c\u2500\u2500 utils/                  # DataInspector, CSVMonitor\n\u2502   \u2514\u2500\u2500 config/                 # Central configuration (inside shared)\n\u251c\u2500\u2500 lab1_sales_performance/     # Lab 1 (independent data)\n\u251c\u2500\u2500 lab2_forecast_model/        # Lab 2 (independent data)\n\u2514\u2500\u2500 lab3_customer_segmentation/ # Lab 3 (independent data)\n</code></pre> <p>Current Architecture: - \u2705 One venv - All labs share Python environment (~500MB total) - \u2705 Independent data - Each lab has its own DuckDB database - \u26a0\ufe0f Manual switching - Edit <code>profiles.yml</code> when changing labs - \u26a0\ufe0f Same dependencies - All labs must use compatible packages</p> <p>See Current Setup for detailed analysis.</p>"},{"location":"#shared-utilities","title":"Shared Utilities","text":"<p>Work with any lab's database using common tools:</p> <pre><code># Inspect lab1 database\nfrom shared.utils.data_inspector import DataInspector\ninspector = DataInspector('lab1_sales_performance/data/lab1.duckdb')\nquality = inspector.get_quality_score('gold', 'summary')\n</code></pre>"},{"location":"#workflow-switching-between-labs","title":"Workflow: Switching Between Labs","text":"<pre><code># Activate venv once\nsource .venv/bin/activate\n\n# Work on lab1\ncd lab1_sales_performance/dbt\ndbt debug  # Verify profiles.yml points to lab1.duckdb\ndbt run\n\n# Switch to lab2\ncd ../../lab2_forecast_model/dbt\n# Edit profiles.yml to point to lab2.duckdb\ndbt debug  # Verify correct database\ndbt run\n</code></pre> <p>\u26a0\ufe0f Always run <code>dbt debug</code> before <code>dbt run</code> to verify correct database connection.</p>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#1-clone-repository","title":"1. Clone Repository","text":"<pre><code>git clone https://github.com/narensham/buildcpg-labs.git\ncd buildcpg-labs\n</code></pre>"},{"location":"#2-setup-shared-environment","title":"2. Setup Shared Environment","text":"<pre><code># Create single venv\npython3 -m venv .venv\nsource .venv/bin/activate\n\n# Install dependencies\npip install pyyaml duckdb pandas dbt-duckdb\n</code></pre>"},{"location":"#3-work-with-lab-1","title":"3. Work with Lab 1","text":"<pre><code>cd lab1_sales_performance/dbt\ndbt debug  # Verify connection\ndbt run    # Run transformations\n\n# Inspect results\ncd ..\npython scripts/inspect_data.py\n</code></pre>"},{"location":"#4-create-lab-2-future","title":"4. Create Lab 2 (Future)","text":"<pre><code>cd ../..\n./setup_new_lab.sh lab2_forecast_model\ncd lab2_forecast_model/dbt\n# Edit profiles.yml with lab2 database path\ndbt debug\ndbt run\n</code></pre>"},{"location":"#documentation-structure","title":"Documentation Structure","text":"<ul> <li>Getting Started - Setup and first steps</li> <li>Architecture - Design and concepts</li> <li>Current Setup - Single venv approach explained</li> <li>Phases - Implementation phases</li> <li>Utilities - Shared tools reference</li> <li>Troubleshooting - Common issues and fixes</li> </ul>"},{"location":"#project-status","title":"Project Status","text":""},{"location":"#phase-1-foundation","title":"Phase 1: Foundation \u2705","text":"<ul> <li>Shared utilities (DataInspector, CSVMonitor)</li> <li>Central configuration (<code>shared/config/</code>)</li> <li>Lab1 inspection scripts</li> <li>Single venv setup</li> </ul>"},{"location":"#phase-2-automation-planned","title":"Phase 2: Automation (Planned)","text":"<ul> <li>Profile switching helpers</li> <li>Safety checks before dbt run</li> <li>Lab creation templates</li> <li>Documentation updates</li> </ul>"},{"location":"#phase-3-future","title":"Phase 3+: Future","text":"<ul> <li>Per-lab venvs (when needed)</li> <li>Orchestration (Airflow/Prefect)</li> <li>Advanced monitoring</li> <li>Data quality gates</li> </ul>"},{"location":"#current-setup-pros-cons","title":"Current Setup: Pros &amp; Cons","text":""},{"location":"#advantages","title":"Advantages \u2705","text":"<ul> <li>Space efficient - One venv (~500MB) vs per-lab venvs (~500MB \u00d7 N)</li> <li>Consistent packages - All labs use same versions</li> <li>Simple setup - Install dependencies once</li> <li>Quick switching - Just edit profiles.yml</li> </ul>"},{"location":"#trade-offs","title":"Trade-offs \u26a0\ufe0f","text":"<ul> <li>No dependency isolation - All labs must use compatible packages</li> <li>Manual profile switching - Edit profiles.yml when changing labs</li> <li>Risk of errors - Possible to run dbt on wrong database</li> <li>No concurrent work - Can't work on multiple labs simultaneously</li> </ul> <p>Recommendation: Current setup works well for 1-2 labs with single developer. Consider migrating to per-lab venvs when you have 3+ labs or multiple team members.</p> <p>See Current Setup Analysis for full details.</p>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python 3.11+</li> <li>Mac 11+ or Linux (no Docker required)</li> <li>Git</li> <li>Discipline for profile switching</li> </ul>"},{"location":"#common-tasks","title":"Common Tasks","text":""},{"location":"#check-which-database-youre-connected-to","title":"Check Which Database You're Connected To","text":"<pre><code>cd lab1_sales_performance/dbt\ndbt debug | grep path\n# Should show: path: ../data/lab1_sales_performance.duckdb\n</code></pre>"},{"location":"#inspect-data-quality","title":"Inspect Data Quality","text":"<pre><code>cd lab1_sales_performance\npython scripts/inspect_data.py\n# Shows: schemas, tables, row counts, quality scores\n</code></pre>"},{"location":"#monitor-new-data","title":"Monitor New Data","text":"<pre><code>python scripts/check_for_new_data.py\n# Shows: if CSV was updated, new row count\n</code></pre>"},{"location":"#safety-tips","title":"Safety Tips","text":""},{"location":"#before-running-dbt","title":"Before Running dbt","text":"<pre><code># 1. Check current directory\npwd\n\n# 2. Verify profiles.yml\ncat dbt/profiles.yml | grep path\n\n# 3. Run debug to confirm\ndbt debug\n\n# 4. Then run pipeline\ndbt run\n</code></pre>"},{"location":"#prevent-wrong-database-writes","title":"Prevent Wrong Database Writes","text":"<p>Create an alias in <code>~/.zshrc</code>:</p> <pre><code>alias dbt-safe='dbt debug &amp;&amp; read -q \"REPLY?Continue with dbt run? (y/n) \" &amp;&amp; dbt run'\n</code></pre> <p>Usage: <pre><code>dbt-safe  # Shows database, asks for confirmation\n</code></pre></p>"},{"location":"#support","title":"Support","text":"<ul> <li>\ud83d\udcd6 Read the docs</li> <li>\u2753 Check FAQ</li> <li>\ud83d\udd27 Troubleshooting</li> <li>\u26a0\ufe0f Current Setup Details</li> </ul> <p>Architecture: Single shared venv + independent data per lab Last Updated: January 2025 Maintainer: narensham Repository: GitHub</p>"},{"location":"faq/","title":"Frequently Asked Questions","text":""},{"location":"faq/#general-questions","title":"General Questions","text":""},{"location":"faq/#what-is-buildcpg-labs","title":"What is BuildCPG Labs?","text":"<p>A data engineering platform for managing multiple independent data labs using dbt, DuckDB, and Python. Each lab is isolated but shares common utilities.</p>"},{"location":"faq/#why-multiple-labs-instead-of-one-big-project","title":"Why multiple labs instead of one big project?","text":"<p>Different labs often have: - Different data sources and formats - Different transformation logic - Different schedules and SLAs - Independent teams working on them</p> <p>Keeping them separate prevents one from breaking others.</p>"},{"location":"faq/#do-i-need-to-use-all-labs","title":"Do I need to use all labs?","text":"<p>No. You can start with lab1 and create additional labs as needed. Each lab works independently.</p>"},{"location":"faq/#can-labs-share-data","title":"Can labs share data?","text":"<p>Currently, each lab has its own database. Future versions will support lab-to-lab data sharing through view exports.</p>"},{"location":"faq/#does-this-work-on-windows","title":"Does this work on Windows?","text":"<p>Yes, with WSL2 (Windows Subsystem for Linux). Mac 11+ and Linux are natively supported. No Docker required.</p>"},{"location":"faq/#architecture-questions","title":"Architecture Questions","text":""},{"location":"faq/#why-duckdb-instead-of-other-databases","title":"Why DuckDB instead of other databases?","text":"<ul> <li>No server needed (embedded)</li> <li>Works on older Macs (Mac 11+)</li> <li>No Docker required</li> <li>Small, easy to manage</li> <li>Perfect for single-machine setups</li> <li>Can scale to multi-machine later</li> </ul>"},{"location":"faq/#whats-the-difference-between-shared-and-lab-specific-files","title":"What's the difference between shared and lab-specific files?","text":"<p>Shared: Code used by ALL labs (DataInspector, CSVMonitor) Lab-specific: Code only that lab uses (models, dashboards, data)</p>"},{"location":"faq/#how-do-labs-communicate","title":"How do labs communicate?","text":"<p>They don't (by design). Future phases will add data export/import between labs.</p>"},{"location":"faq/#can-i-use-different-python-versions-per-lab","title":"Can I use different Python versions per lab?","text":"<p>Yes. Each lab has its own venv, so different packages/versions are allowed.</p>"},{"location":"faq/#setup-questions","title":"Setup Questions","text":""},{"location":"faq/#how-long-does-setup-take","title":"How long does setup take?","text":"<ul> <li>First time: 10-15 minutes (download, install dependencies)</li> <li>Each additional lab: 2 minutes (automatic bootstrap)</li> </ul>"},{"location":"faq/#can-i-skip-phase-1","title":"Can I skip Phase 1?","text":"<p>Not recommended. Phase 1 creates the foundation that Phases 2+ depend on.</p>"},{"location":"faq/#what-if-i-only-want-phase-1","title":"What if I only want Phase 1?","text":"<p>That's fine. Phase 1 is fully functional for basic lab work. Phase 2 adds convenience but isn't required.</p>"},{"location":"faq/#can-i-customize-the-templates","title":"Can I customize the templates?","text":"<p>Yes. Edit files in <code>shared/templates/</code> and they'll be used for new labs created after that.</p>"},{"location":"faq/#usage-questions","title":"Usage Questions","text":""},{"location":"faq/#what-does-make-setup-do","title":"What does <code>make setup</code> do?","text":"<ol> <li>Creates Python virtual environment (venv)</li> <li>Installs dependencies from requirements.txt</li> <li>Runs dbt debug to verify setup</li> </ol>"},{"location":"faq/#what-does-make-run-do","title":"What does <code>make run</code> do?","text":"<p>Executes <code>dbt run</code> which transforms data through bronze \u2192 silver \u2192 gold layers.</p>"},{"location":"faq/#how-do-i-see-what-changed-in-my-database","title":"How do I see what changed in my database?","text":"<p>Run <code>make inspect</code> to see schemas, tables, row counts, and quality scores.</p>"},{"location":"faq/#can-i-use-dbt-commands-directly","title":"Can I use dbt commands directly?","text":"<p>Yes. <code>cd lab/dbt &amp;&amp; dbt run</code> works the same as <code>make run</code>. Makefile just automates activation.</p>"},{"location":"faq/#how-do-i-add-a-new-model-to-lab1","title":"How do I add a new model to lab1?","text":"<pre><code>cd lab1_sales_performance/dbt/models\n# Create .sql file\n# Run: make run\n</code></pre> <p>See dbt documentation for model details.</p>"},{"location":"faq/#shared-utilities-questions","title":"Shared Utilities Questions","text":""},{"location":"faq/#how-do-i-use-datainspector-in-my-code","title":"How do I use DataInspector in my code?","text":"<pre><code>import sys\nsys.path.insert(0, '../..')\nfrom shared.utils.data_inspector import DataInspector\n\ninspector = DataInspector('data/lab1_sales_performance.duckdb')\nschemas = inspector.get_all_schemas()\n</code></pre>"},{"location":"faq/#can-i-modify-shared-utilities","title":"Can I modify shared utilities?","text":"<p>Yes, but test thoroughly. Changes affect ALL labs.</p>"},{"location":"faq/#how-do-i-add-a-new-shared-utility","title":"How do I add a new shared utility?","text":"<ol> <li>Create file in <code>shared/utils/</code></li> <li>Import it in your lab scripts</li> <li>Test thoroughly</li> <li>Commit to git</li> </ol>"},{"location":"faq/#do-shared-utilities-get-committed-to-git","title":"Do shared utilities get committed to git?","text":"<p>Yes. They're in the git repo so everyone gets them.</p>"},{"location":"faq/#data-questions","title":"Data Questions","text":""},{"location":"faq/#where-is-my-data-stored","title":"Where is my data stored?","text":"<p>In <code>lab/data/lab_name.duckdb</code> (DuckDB database file).</p>"},{"location":"faq/#how-do-i-backup-my-data","title":"How do I backup my data?","text":"<pre><code># Simply copy the .duckdb file\ncp lab1_sales_performance/data/lab1_sales_performance.duckdb lab1_sales_performance/data/lab1_sales_performance.duckdb.backup\n</code></pre>"},{"location":"faq/#how-large-can-databases-get","title":"How large can databases get?","text":"<p>DuckDB on a single machine can handle multi-GB databases easily. For 100GB+, consider upgrading infrastructure.</p>"},{"location":"faq/#can-i-read-external-data-in-dbt","title":"Can I read external data in dbt?","text":"<p>Yes. dbt supports reading from CSVs, APIs, and other sources via Jinja2 macros.</p>"},{"location":"faq/#how-do-i-connect-to-real-databases-not-duckdb","title":"How do I connect to real databases (not DuckDB)?","text":"<p>Future versions will support PostgreSQL, MySQL, etc. Currently limited to DuckDB.</p>"},{"location":"faq/#git-questions","title":"Git Questions","text":""},{"location":"faq/#can-i-commit-my-venv","title":"Can I commit my venv?","text":"<p>No. It's huge and system-specific. Use <code>.gitignore</code> to exclude it.</p>"},{"location":"faq/#can-i-commit-my-duckdb-files","title":"Can I commit my .duckdb files?","text":"<p>For development: no (they change constantly). For tracked data: yes (if you need version history).</p>"},{"location":"faq/#how-do-i-prevent-accidental-commits","title":"How do I prevent accidental commits?","text":"<p><code>.gitignore</code> automatically excludes venv, .duckdb, and build artifacts.</p>"},{"location":"faq/#what-should-i-commit","title":"What should I commit?","text":"<ul> <li>dbt models (.sql files)</li> <li>Python scripts (.py files)</li> <li>Configuration files (.yml, .yaml)</li> <li>Documentation (.md files)</li> <li>requirements.txt</li> </ul>"},{"location":"faq/#what-shouldnt-i-commit","title":"What shouldn't I commit?","text":"<ul> <li>venv/ directories</li> <li>.duckdb files (unless intentional)</li> <li>dbt/target/ and dbt/logs/</li> <li>.DS_Store</li> <li>IDE settings</li> </ul>"},{"location":"faq/#performance-questions","title":"Performance Questions","text":""},{"location":"faq/#how-fast-does-dbt-run","title":"How fast does dbt run?","text":"<p>Depends on data size. With ~3K rows: 1-2 seconds. Scale linearly with data.</p>"},{"location":"faq/#can-i-make-dbt-faster","title":"Can I make dbt faster?","text":"<ul> <li>Incremental materialization (load only new data)</li> <li>Optimize SQL queries</li> <li>Add indexes (if using real databases)</li> </ul>"},{"location":"faq/#will-my-laptop-slow-down-with-multiple-labs","title":"Will my laptop slow down with multiple labs?","text":"<p>Each lab runs independently. Multiple venvs take ~500MB each. Not a concern for 10 labs.</p>"},{"location":"faq/#scaling-questions","title":"Scaling Questions","text":""},{"location":"faq/#can-i-scale-to-50-labs","title":"Can I scale to 50 labs?","text":"<p>Yes. Structure supports unlimited labs. You'll just need: - Disk space (~1GB per lab average) - Orchestration tool (Airflow) to manage all runs</p>"},{"location":"faq/#whats-the-limit","title":"What's the limit?","text":"<p>No hard limit. Practical limit depends on infrastructure.</p>"},{"location":"faq/#can-i-migrate-to-cloud-later","title":"Can I migrate to cloud later?","text":"<p>Yes. The architecture is platform-agnostic. Move to Snowflake/BigQuery/etc. when needed.</p>"},{"location":"faq/#phase-questions","title":"Phase Questions","text":""},{"location":"faq/#whats-the-difference-between-phases","title":"What's the difference between phases?","text":"<ul> <li>Phase 1: Shared utilities + configuration</li> <li>Phase 2: Makefile + bootstrap (automation)</li> <li>Phase 3+: Orchestration + monitoring</li> </ul>"},{"location":"faq/#can-i-use-phase-1-without-phase-2","title":"Can I use Phase 1 without Phase 2?","text":"<p>Yes. Phase 1 is standalone and functional.</p>"},{"location":"faq/#when-should-i-use-phase-2","title":"When should I use Phase 2?","text":"<p>When you want <code>make</code> commands and automated lab creation. Highly recommended.</p>"},{"location":"faq/#when-should-i-use-phase-3","title":"When should I use Phase 3?","text":"<p>When managing 3+ labs and want automated scheduling (Airflow).</p>"},{"location":"faq/#team-questions","title":"Team Questions","text":""},{"location":"faq/#can-multiple-people-work-on-same-lab","title":"Can multiple people work on same lab?","text":"<p>Yes. Use git branches for features.</p>"},{"location":"faq/#can-different-people-own-different-labs","title":"Can different people own different labs?","text":"<p>Yes. Each lab is independent.</p>"},{"location":"faq/#how-do-we-prevent-conflicts","title":"How do we prevent conflicts?","text":"<ul> <li>Use git for coordination</li> <li>Clear lab ownership</li> <li>Communication on shared utilities</li> </ul>"},{"location":"faq/#can-we-code-review-lab-changes","title":"Can we code review lab changes?","text":"<p>Yes. Pull requests work for both lab-specific and shared code.</p>"},{"location":"faq/#troubleshooting-questions","title":"Troubleshooting Questions","text":""},{"location":"faq/#my-database-is-corrupted","title":"My database is corrupted","text":"<pre><code># Delete it and recreate\nrm lab1_sales_performance/data/lab1_sales_performance.duckdb\ncd lab1_sales_performance/dbt\ndbt run  # Recreates from source\n</code></pre>"},{"location":"faq/#i-accidentally-deleted-a-model","title":"I accidentally deleted a model","text":"<pre><code>git checkout &lt;file&gt;  # Restore from git\ncd dbt\ndbt run  # Recreate tables\n</code></pre>"},{"location":"faq/#everything-is-broken","title":"Everything is broken","text":"<pre><code>git status  # See what changed\ngit diff   # See details\ngit reset --hard  # Go back to last commit\n</code></pre>"},{"location":"faq/#who-do-i-ask-for-help","title":"Who do I ask for help?","text":"<p>See Troubleshooting guide or ask maintainer.</p>"},{"location":"faq/#feature-questions","title":"Feature Questions","text":""},{"location":"faq/#can-i-add-monitoringalerting","title":"Can I add monitoring/alerting?","text":"<p>Yes, in Phase 3+. Currently manual checks only.</p>"},{"location":"faq/#can-i-use-python-notebooks","title":"Can I use Python notebooks?","text":"<p>Yes. Put them in <code>lab/notebooks/</code>.</p>"},{"location":"faq/#can-i-have-dashboards","title":"Can I have dashboards?","text":"<p>Yes. Connect BI tools (Tableau/Looker) to lab databases.</p>"},{"location":"faq/#can-i-do-ml","title":"Can I do ML?","text":"<p>Yes. Add models to <code>lab/pipelines/</code> or use Jupyter.</p>"},{"location":"faq/#still-have-questions","title":"Still Have Questions?","text":"<ul> <li>Check Getting Started</li> <li>Check Troubleshooting</li> <li>Check Architecture</li> <li>Ask in GitHub Issues</li> </ul>"},{"location":"troubleshooting/","title":"Troubleshooting Guide","text":"<p>Solutions to common issues in BuildCPG Labs.</p>"},{"location":"troubleshooting/#installation-issues","title":"Installation Issues","text":""},{"location":"troubleshooting/#python-version-error","title":"Python Version Error","text":"<p>Problem: <code>python</code> command not found or shows Python 2.x</p> <p>Solution: <pre><code># Check available versions\nwhich python3\npython3 --version\n\n# Use python3 instead of python\npython3 -m venv venv\npython3 -m pip install pyyaml\n</code></pre></p>"},{"location":"troubleshooting/#virtual-environment-not-activating","title":"Virtual Environment Not Activating","text":"<p>Problem: <code>source venv/bin/activate</code> doesn't work on Mac</p> <p>Solution: <pre><code># Try full path\nsource ./venv/bin/activate\n\n# Or use this directly\n./venv/bin/python --version\n\n# For Zsh on newer Mac:\nsource venv/bin/activate\n</code></pre></p>"},{"location":"troubleshooting/#pip-command-not-found","title":"pip: command not found","text":"<p>Problem: <code>pip install</code> doesn't work</p> <p>Solution: <pre><code># Use python -m pip instead\npython -m pip install pyyaml duckdb pandas\n\n# Or upgrade pip\npython -m pip install --upgrade pip\n</code></pre></p>"},{"location":"troubleshooting/#permission-denied-error","title":"Permission Denied Error","text":"<p>Problem: <code>permission denied: ./setup.sh</code></p> <p>Solution: <pre><code>chmod +x setup.sh\n./setup.sh\n</code></pre></p>"},{"location":"troubleshooting/#dbt-issues","title":"dbt Issues","text":""},{"location":"troubleshooting/#dbt-command-not-found","title":"dbt: command not found","text":"<p>Problem: <code>dbt run</code> or <code>dbt debug</code> doesn't work</p> <p>Solution: <pre><code># Make sure you're in lab directory\ncd lab1_sales_performance\n\n# Make sure venv is activated\nsource venv/bin/activate\n\n# Try again\ndbt --version\n\n# If still fails, reinstall\npip install dbt-duckdb\n</code></pre></p>"},{"location":"troubleshooting/#dbt-debug-shows-errors","title":"dbt debug shows errors","text":"<p>Problem: <code>dbt debug</code> fails with configuration errors</p> <p>Solution: <pre><code># Check you're in dbt directory\ncd lab1_sales_performance/dbt\n\n# Verify profiles.yml exists\nls -la profiles.yml\n\n# Check dbt_project.yml\nls -la dbt_project.yml\n\n# Run debug again\ndbt debug\n</code></pre></p>"},{"location":"troubleshooting/#profile-not-found","title":"Profile not found","text":"<p>Problem: <code>Profile 'lab1_duckdb' not found</code></p> <p>Solution: <pre><code># Check profiles.yml path\ncat ~/.dbt/profiles.yml\n\n# Or ensure it's in the lab directory\ncd lab1_sales_performance/dbt\ncat profiles.yml\n\n# Update dbt_project.yml to point to correct profile\n</code></pre></p>"},{"location":"troubleshooting/#data-inspector-issues","title":"Data Inspector Issues","text":""},{"location":"troubleshooting/#modulenotfounderror-no-module-named-shared","title":"ModuleNotFoundError: No module named 'shared'","text":"<p>Problem: Python can't find shared utilities</p> <p>Solution: <pre><code># Make sure you're in lab directory\ncd lab1_sales_performance\n\n# Run from correct location\npython scripts/inspect_data.py\n\n# Verify path in script\nhead -20 scripts/inspect_data.py\n# Should show: sys.path.insert(0, '../..')\n</code></pre></p>"},{"location":"troubleshooting/#filenotfounderror-labs_configyaml","title":"FileNotFoundError: labs_config.yaml","text":"<p>Problem: Configuration file not found</p> <p>Solution: <pre><code># Check file exists\nls -la config/labs_config.yaml\n\n# Create if missing\ntouch config/labs_config.yaml\n\n# Add content\ncat &gt; config/labs_config.yaml &lt;&lt; 'EOF'\nlabs:\n  lab1_sales_performance:\n    path: lab1_sales_performance\n    db_path: lab1_sales_performance/data/lab1_sales_performance.duckdb\n    dbt_path: lab1_sales_performance/dbt\nEOF\n</code></pre></p>"},{"location":"troubleshooting/#database-file-not-found","title":"Database file not found","text":"<p>Problem: <code>Cannot open file \".../lab1_sales_performance.duckdb\"</code></p> <p>Solution: <pre><code># Check database exists\nls -la lab1_sales_performance/data/\n\n# Create database by running dbt\ncd lab1_sales_performance/dbt\ndbt run\n\n# Then try inspection again\ncd ..\npython scripts/inspect_data.py\n</code></pre></p>"},{"location":"troubleshooting/#git-issues","title":"Git Issues","text":""},{"location":"troubleshooting/#too-many-loose-objects-in-repository","title":"Too many loose objects in repository","text":"<p>Problem: <code>warning: There are too many unreachable loose objects</code></p> <p>Solution: <pre><code># Remove gc.log if it exists\nrm .git/gc.log 2&gt;/dev/null || true\n\n# Prune repository\ngit prune\n\n# Optimize repository\ngit gc --aggressive\n</code></pre></p>"},{"location":"troubleshooting/#venv-directory-accidentally-committed","title":"venv directory accidentally committed","text":"<p>Problem: Tried to push and got huge file size</p> <p>Solution: <pre><code># Remove from git tracking (keeps files on disk)\ngit rm -r --cached venv/\ngit rm -r --cached .venv/\ngit rm -r --cached dbt/target/\n\n# Update .gitignore\necho \"venv/\" &gt;&gt; .gitignore\necho \".venv/\" &gt;&gt; .gitignore\necho \"dbt/target/\" &gt;&gt; .gitignore\n\n# Commit cleanup\ngit add .gitignore\ngit commit -m \"Remove build artifacts from git\"\n</code></pre></p>"},{"location":"troubleshooting/#makefile-issues","title":"Makefile Issues","text":""},{"location":"troubleshooting/#make-command-not-found","title":"make: command not found","text":"<p>Problem: <code>make</code> is not installed</p> <p>Solution (Mac): <pre><code># Install Xcode command line tools\nxcode-select --install\n\n# Or install make directly\nbrew install make\n</code></pre></p> <p>Solution (Linux): <pre><code>sudo apt-get update\nsudo apt-get install make build-essential\n</code></pre></p>"},{"location":"troubleshooting/#tab-indentation-error-in-makefile","title":"Tab indentation error in Makefile","text":"<p>Problem: <code>missing separator. Stop.</code> when running make</p> <p>Solution: <pre><code># Makefiles require TAB indentation, not spaces\n# Edit Makefile and ensure all recipe lines start with TAB\n\n# In vim:\n# :set noexpandtab\n\n# In nano:\n# Ctrl+I to insert tab\n\n# Visual check:\ncat -A Makefile | head -20\n# Tabs show as ^I, spaces show as regular spaces\n</code></pre></p>"},{"location":"troubleshooting/#venv-not-found-when-running-make","title":"venv not found when running make","text":"<p>Problem: <code>venv/bin/python: No such file or directory</code></p> <p>Solution: <pre><code># Run setup first\nmake setup\n\n# This creates venv and installs dependencies\n</code></pre></p>"},{"location":"troubleshooting/#common-data-issues","title":"Common Data Issues","text":""},{"location":"troubleshooting/#no-schemas-in-database","title":"No schemas in database","text":"<p>Problem: <code>inspect_data.py</code> shows only 'main' and 'information_schema'</p> <p>Solution: <pre><code># Tables haven't been created yet\n# Create them with dbt\ncd lab1_sales_performance/dbt\ndbt run\n\n# Then inspect again\ncd ..\npython scripts/inspect_data.py\n</code></pre></p>"},{"location":"troubleshooting/#quality-score-shows-0","title":"Quality score shows 0%","text":"<p>Problem: <code>get_quality_score</code> returns 0 even with good data</p> <p>Solution: <pre><code># Check table has rows\npython -c \"\nimport sys\nsys.path.insert(0, '../..')\nfrom shared.utils.data_inspector import DataInspector\ninspector = DataInspector('data/lab1_sales_performance.duckdb')\nprint(inspector.get_table_stats('raw', 'sales_data'))\n\"\n\n# If rows = 0, data wasn't loaded\n# Load it with dbt:\ncd dbt\ndbt run\n</code></pre></p>"},{"location":"troubleshooting/#csv-says-no-new-data-but-file-was-updated","title":"CSV says \"no new data\" but file was updated","text":"<p>Problem: <code>check_for_new_data.py</code> doesn't detect changes</p> <p>Solution: <pre><code># State file might be outdated\n# Remove it to reset detection\nrm lab1_sales_performance/.csv_state.json\n\n# Run again\ncd lab1_sales_performance\npython scripts/check_for_new_data.py\n</code></pre></p>"},{"location":"troubleshooting/#getting-help","title":"Getting Help","text":""},{"location":"troubleshooting/#enable-debug-logging","title":"Enable Debug Logging","text":"<pre><code># For dbt:\ndbt run --debug\n\n# For Python scripts:\n# Add this to beginning of script:\nimport logging\nlogging.basicConfig(level=logging.DEBUG)\n</code></pre>"},{"location":"troubleshooting/#check-file-permissions","title":"Check File Permissions","text":"<pre><code># Verify script is executable\nls -la scripts/inspect_data.py\n\n# Make executable if needed\nchmod +x scripts/inspect_data.py\n</code></pre>"},{"location":"troubleshooting/#verify-directory-structure","title":"Verify Directory Structure","text":"<pre><code># From buildcpg-labs root:\ntree -L 2 -I '__pycache__|*.pyc|venv'\n\n# Or list key files:\nfind . -name \"dbt_project.yml\" -o -name \"labs_config.yaml\" -o -name \"Makefile\"\n</code></pre>"},{"location":"troubleshooting/#check-disk-space","title":"Check Disk Space","text":"<pre><code># Verify you have space\ndf -h\n\n# Check database size\ndu -sh lab1_sales_performance/data/\n</code></pre>"},{"location":"troubleshooting/#still-stuck","title":"Still Stuck?","text":"<ol> <li>Check FAQ for common questions</li> <li>Review Quick Start</li> <li>Check Architecture to understand the design</li> <li>Review the exact error message and search in this guide</li> <li>Check git commit history for clues: <code>git log --oneline</code> </li> </ol>"},{"location":"architecture/medallion-architecture/","title":"Medallion Architecture","text":""},{"location":"architecture/medallion-architecture/#overview","title":"Overview","text":"<p>The Medallion Architecture organizes data pipelines into progressive layers to ensure quality, reliability, and efficiency in analytics.</p>"},{"location":"architecture/medallion-architecture/#layers","title":"Layers","text":"<ol> <li> <p>Bronze (Raw)    Raw ingested data from source systems. Minimal transformation, only cleaned for parsing errors.</p> </li> <li> <p>Silver (Cleaned / Curated)    Data is cleaned, deduplicated, and enriched. Suitable for basic analytics and reporting.</p> </li> <li> <p>Gold (Business-ready / Aggregated)    Fully transformed data optimized for dashboards, ML, and advanced analytics.</p> </li> </ol>"},{"location":"architecture/medallion-architecture/#principles","title":"Principles","text":"<ul> <li>Incremental processing: Each layer adds value without overwriting prior stages.</li> <li>Traceability: Easy to trace data lineage from Gold \u2192 Silver \u2192 Bronze.</li> <li>Reusability: Models at Silver and Gold layers can be shared across multiple labs.</li> </ul>"},{"location":"architecture/medallion-architecture/#benefits","title":"Benefits","text":"<ul> <li>Reduces data quality issues downstream.</li> <li>Enables faster experimentation and analytics.</li> <li>Facilitates modular ETL development in a multi-lab environment.</li> </ul>"},{"location":"architecture/medallion-architecture/#visual-diagram","title":"Visual Diagram","text":""},{"location":"architecture/multi-lab-design/","title":"Multi-Lab Design","text":""},{"location":"architecture/multi-lab-design/#overview","title":"Overview","text":"<p>The Multi-Lab Design organizes a data engineering playground into multiple independent labs, each representing a self-contained ETL pipeline or analytical experiment. This design ensures modularity, safety, and flexibility, allowing teams or individuals to experiment without affecting other projects.</p>"},{"location":"architecture/multi-lab-design/#goals","title":"Goals","text":"<ul> <li>Isolation: Each lab operates independently with its own datasets, models, and transformations.</li> <li>Modularity: Labs can be added, removed, or updated without impacting the broader system.</li> <li>Reusability: Shared components or datasets can be referenced across labs while maintaining separation of experimental data.</li> </ul>"},{"location":"architecture/multi-lab-design/#lab-structure","title":"Lab Structure","text":""},{"location":"architecture/multi-lab-design/#typical-lab-folder","title":"Typical Lab Folder","text":"<pre><code>lab1_sales_performance/\n\u251c\u2500\u2500 raw/\n\u251c\u2500\u2500 bronze/\n\u251c\u2500\u2500 silver/\n\u251c\u2500\u2500 gold/\n\u251c\u2500\u2500 dbt/\n\u2502 \u251c\u2500\u2500 models/\n\u2502 \u251c\u2500\u2500 snapshots/\n\u2502 \u2514\u2500\u2500 seeds/\n\u2514\u2500\u2500 README.md\n</code></pre> <ul> <li>raw: Ingested source data (unchanged).  </li> <li>bronze: Cleaned, minimally transformed data.  </li> <li>silver: Enriched and validated datasets.  </li> <li>gold: Business-ready, aggregated tables for analysis or reporting.  </li> <li>dbt: Contains lab-specific transformations and metadata.  </li> </ul>"},{"location":"architecture/multi-lab-design/#shared-vs-lab-specific","title":"Shared vs Lab-Specific","text":"<ul> <li>Lab-specific datasets: Only relevant to a single lab; changes are isolated.  </li> <li>Shared datasets: Common reference tables or utilities used across multiple labs, stored in a central <code>shared/</code> directory.  </li> </ul> <p>\ud83d\udca1 Tip: Only include data in <code>shared/</code> if multiple labs depend on it. Avoid making everything shared to prevent accidental coupling.</p>"},{"location":"architecture/multi-lab-design/#benefits-of-multi-lab-design","title":"Benefits of Multi-Lab Design","text":"<ul> <li>Safe experimentation: Teams can iterate freely without breaking other pipelines.  </li> <li>Scalability: Easily add new labs for different datasets or analytical scenarios.  </li> <li>Reproducibility: Clear boundaries make it easy to reproduce experiments or roll back changes.  </li> <li>Collaboration: Multiple contributors can work in parallel without conflicts.</li> </ul>"},{"location":"architecture/multi-lab-design/#best-practices","title":"Best Practices","text":"<ol> <li>Maintain consistent folder structures across labs.  </li> <li>Clearly document each lab\u2019s purpose in its README.  </li> <li>Version shared datasets and transformations carefully.  </li> <li>Use naming conventions to avoid collisions (e.g., <code>lab1_sales_2025_bronze</code>).  </li> <li>Leverage automation (e.g., CI/CD pipelines) to validate transformations before deployment.</li> </ol>"},{"location":"architecture/multi-lab-design/#example-diagram","title":"Example Diagram","text":"<p><pre><code>+----------------+     +----------------+     +----------------+\n|   Lab 1        |     |   Lab 2        |     |   Lab 3        |\n|   raw \u2192 bronze |     | raw \u2192 bronze   |     | raw \u2192 bronze   |\n|   \u2192 silver     |     | \u2192 silver       |     | \u2192 silver       |\n|   \u2192 gold       |     | \u2192 gold         |     | \u2192 gold         |\n+----------------+     +----------------+     +----------------+\n         \\                   |                     /\n          \\                  |                    /\n           \\                 |                   /\n            \\                |                  /\n             \\               |                 /\n              +--------------------------------+\n              |           Shared Data          |\n              +--------------------------------+\n</code></pre> This diagram shows independent labs consuming shared datasets while maintaining isolated pipelines.</p>"},{"location":"architecture/multi-lab-design/#summary","title":"Summary","text":"<p>The Multi-Lab Design is ideal for learning, experimentation, and scalable analytics. By enforcing modularity and isolation, it enables reproducible workflows and safe collaboration while maintaining the flexibility to share data and reusable transformations across projects.</p>"},{"location":"architecture/overview/","title":"Architecture Overview","text":""},{"location":"architecture/overview/#system-design","title":"System Design","text":"<p>BuildCPG Labs uses a multi-lab, shared-utilities architecture designed for scalability and independence.</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         ORCHESTRATION LAYER (Airflow/Prefect)           \u2502\n\u2502  Schedules pipelines, monitors health, handles alerts   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                            \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502              DATA INGESTION LAYER                        \u2502\n\u2502  \u2022 CSV monitoring \u2022 API polling \u2022 Data validation       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                            \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         dbt TRANSFORMATION LAYER (Per Lab)              \u2502\n\u2502  \u2022 Bronze (Raw) \u2192 Silver (Cleaned) \u2192 Gold (Analytics)  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                            \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502              QUALITY ASSURANCE LAYER                     \u2502\n\u2502  \u2022 dbt tests \u2022 Data freshness \u2022 Quality scoring         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                            \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         SHARED UTILITIES LAYER (Root Level)             \u2502\n\u2502  \u2022 DataInspector \u2022 CSVMonitor \u2022 Path Helpers            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/overview/#directory-structure-current-setup","title":"Directory Structure (Current Setup)","text":"<pre><code>buildcpg-labs/\n\u2502\n\u251c\u2500\u2500 .venv/                           # SINGLE venv (shared by all labs)\n\u2502   \u251c\u2500\u2500 bin/\n\u2502   \u251c\u2500\u2500 lib/\n\u2502   \u2514\u2500\u2500 ...\n\u2502\n\u251c\u2500\u2500 shared/                          # Shared across ALL labs\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 utils/\n\u2502   \u2502   \u251c\u2500\u2500 data_inspector.py       # Inspect databases\n\u2502   \u2502   \u251c\u2500\u2500 csv_monitor.py          # Detect new data\n\u2502   \u2502   \u2514\u2500\u2500 config_loader.py        # Load configurations\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 config/                      # Config inside shared (not at root)\n\u2502   \u2502   \u251c\u2500\u2500 labs_config.yaml        # Central lab registry\n\u2502   \u2502   \u2514\u2500\u2500 paths.py                # Path helpers\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 data_quality/\n\u2502   \u2502   \u251c\u2500\u2500 validators.py           # Quality validators\n\u2502   \u2502   \u2514\u2500\u2500 expectations.py         # Data expectations\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500 templates/\n\u2502       \u251c\u2500\u2500 Makefile_template       # Template Makefile\n\u2502       \u251c\u2500\u2500 requirements_template.txt\n\u2502       \u251c\u2500\u2500 dbt_project_template.yml\n\u2502       \u2514\u2500\u2500 .gitignore_template\n\u2502\n\u251c\u2500\u2500 lab1_sales_performance/         # LAB 1 (Independent data, shares venv)\n\u2502   \u251c\u2500\u2500 dbt/\n\u2502   \u2502   \u251c\u2500\u2500 dbt_project.yml\n\u2502   \u2502   \u251c\u2500\u2500 profiles.yml            # Manually edited when switching labs\n\u2502   \u2502   \u251c\u2500\u2500 models/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 staging/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 intermediate/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 marts/\n\u2502   \u2502   \u2514\u2500\u2500 tests/\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 data/\n\u2502   \u2502   \u251c\u2500\u2500 raw/\n\u2502   \u2502   \u2514\u2500\u2500 lab1_sales_performance.duckdb\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 scripts/\n\u2502   \u2502   \u251c\u2500\u2500 inspect_data.py\n\u2502   \u2502   \u2514\u2500\u2500 check_for_new_data.py\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 pipelines/\n\u2502   \u2502   \u251c\u2500\u2500 data_ingestion.py\n\u2502   \u2502   \u2514\u2500\u2500 data_quality.py\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 requirements.txt            # Shared dependencies\n\u2502   \u2514\u2500\u2500 .gitignore\n\u2502\n\u251c\u2500\u2500 lab2_forecast_model/            # LAB 2 (Independent data, shares venv)\n\u2502   \u2514\u2500\u2500 (Same structure as lab1)\n\u2502\n\u251c\u2500\u2500 lab3_customer_segmentation/     # LAB 3 (Independent data, shares venv)\n\u2502   \u2514\u2500\u2500 (Same structure as lab1)\n\u2502\n\u251c\u2500\u2500 orchestration/\n\u2502   \u2514\u2500\u2500 airflow_dags.py             # Multi-lab orchestration\n\u2502\n\u251c\u2500\u2500 docs/                           # This documentation\n\u251c\u2500\u2500 setup_new_lab.sh                # Bootstrap new labs\n\u251c\u2500\u2500 mkdocs.yml                      # Documentation config\n\u251c\u2500\u2500 .gitignore\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"architecture/overview/#key-concepts","title":"Key Concepts","text":""},{"location":"architecture/overview/#single-virtual-environment-approach","title":"Single Virtual Environment Approach","text":"<p>Current Setup: - ONE <code>.venv/</code> at root shared by all labs - All labs use same Python packages - Switch between labs by changing dbt profiles manually</p> <p>Advantages: - Less disk space (~500MB vs ~500MB per lab) - Consistent package versions across all labs - Simpler initial setup</p> <p>Trade-offs: - Cannot have labs with conflicting dependencies - Must manually edit <code>profiles.yml</code> when switching labs - Risk of profile switching errors (writing to wrong database) - No concurrent work on different labs</p> <p>\u26a0\ufe0f See Current Setup Details for full pros/cons analysis</p>"},{"location":"architecture/overview/#labs-have-independent-data","title":"Labs Have Independent Data","text":"<ul> <li>Each lab has its own database (lab1.duckdb, lab2.duckdb)</li> <li>Each lab has its own dbt project (dbt/models/, dbt/dbt_project.yml)</li> <li>Each lab has its own raw data (data/raw/)</li> <li>Labs share Python environment but NOT data</li> </ul>"},{"location":"architecture/overview/#shared-utilities","title":"Shared Utilities","text":"<ul> <li>DataInspector - Check database quality (used by all labs)</li> <li>CSVMonitor - Detect new data in CSVs (used by all labs)</li> <li>Config Paths - Get paths for any lab (used by all labs)</li> <li>Written once in <code>shared/</code>, used by all labs</li> <li>Bug fix in shared code fixes all labs</li> </ul>"},{"location":"architecture/overview/#configuration-location","title":"Configuration Location","text":"<p>Config is inside shared/config/ (not at root level):</p> <pre><code># Import pattern for lab scripts\nimport sys\nsys.path.insert(0, '../..')\nfrom shared.config.paths import get_lab_db_path  # Note: shared.config\n\n# NOT this:\n# from config.paths import get_lab_db_path  # \u274c Wrong path\n</code></pre> <pre><code># shared/config/labs_config.yaml\nlabs:\n  lab1_sales_performance:\n    path: lab1_sales_performance\n    db_path: lab1_sales_performance/data/lab1_sales_performance.duckdb\n    dbt_path: lab1_sales_performance/dbt\n\n  lab2_forecast_model:\n    path: lab2_forecast_model\n    db_path: lab2_forecast_model/data/lab2_forecast_model.duckdb\n    dbt_path: lab2_forecast_model/dbt\n</code></pre> <p>This registry tells the system where each lab is and how to find its resources.</p>"},{"location":"architecture/overview/#data-flow","title":"Data Flow","text":""},{"location":"architecture/overview/#single-lab-example","title":"Single Lab Example","text":"<pre><code>CSV Input\n    \u2193\ndbt Load (raw schema)\n    \u2193\ndbt Transform (bronze \u2192 silver \u2192 gold)\n    \u2193\nDuckDB Tables\n    \u2193\nDataInspector (quality check)\n    \u2193\nBI Tool (Tableau/Looker)\n</code></pre>"},{"location":"architecture/overview/#multiple-labs-orchestrated","title":"Multiple Labs Orchestrated","text":"<pre><code>Airflow DAG (Daily 12 AM)\n    \u251c\u2500\u2500 Lab1: Check CSV \u2192 Load \u2192 Transform \u2192 Test \u2192 Inspect\n    \u251c\u2500\u2500 Lab2: Check CSV \u2192 Load \u2192 Transform \u2192 Test \u2192 Inspect\n    \u2514\u2500\u2500 Lab3: Check CSV \u2192 Load \u2192 Transform \u2192 Test \u2192 Inspect\n    \u2193\nAll results aggregated\n    \u2193\nAlert team if any lab fails\n</code></pre>"},{"location":"architecture/overview/#workflow-switching-between-labs","title":"Workflow: Switching Between Labs","text":"<pre><code># 1. Activate shared venv (once per session)\ncd buildcpg-labs\nsource .venv/bin/activate\n\n# 2. Work on lab1\ncd lab1_sales_performance/dbt\n# profiles.yml should point to: ../data/lab1_sales_performance.duckdb\ndbt debug  # Verify correct database\ndbt run\n\n# 3. Switch to lab2\ncd ../../lab2_forecast_model/dbt\n# Edit profiles.yml to point to: ../data/lab2_forecast_model.duckdb\nvim profiles.yml  # Update path\ndbt debug  # Verify correct database\ndbt run\n</code></pre> <p>\u26a0\ufe0f Critical: Always run <code>dbt debug</code> before <code>dbt run</code> to verify you're pointing to the correct database.</p>"},{"location":"architecture/overview/#technology-stack","title":"Technology Stack","text":"Layer Technology Database DuckDB (embedded, Mac compatible) Transformation dbt (data build tool) Scripting Python 3.11+ Environment Single venv (shared) Orchestration Airflow (optional, future) Version Control Git Documentation MkDocs"},{"location":"architecture/overview/#design-principles","title":"Design Principles","text":""},{"location":"architecture/overview/#1-data-independence","title":"1. Data Independence","text":"<p>Labs have separate databases and raw data. One lab's data corruption doesn't affect others.</p>"},{"location":"architecture/overview/#2-shared-python-environment","title":"2. Shared Python Environment","text":"<p>All labs use same venv for consistency and space efficiency (with trade-offs).</p>"},{"location":"architecture/overview/#3-reusability","title":"3. Reusability","text":"<p>Code written for shared utilities is used by all labs without duplication.</p>"},{"location":"architecture/overview/#4-scalability","title":"4. Scalability","text":"<p>Adding lab 10 takes same effort as adding lab 2 (but dependency conflicts may limit this).</p>"},{"location":"architecture/overview/#5-clarity","title":"5. Clarity","text":"<p>Each lab's purpose is clear. Shared code's purpose is clear.</p>"},{"location":"architecture/overview/#6-manual-coordination","title":"6. Manual Coordination","text":"<p>Profile switching requires discipline and verification steps.</p>"},{"location":"architecture/overview/#comparison-current-vs-alternative-architectures","title":"Comparison: Current vs Alternative Architectures","text":""},{"location":"architecture/overview/#current-setup-single-venv","title":"Current Setup (Single venv)","text":"<p>\u2705 Space efficient (one venv) \u2705 Consistent packages \u2705 Simple setup \u274c Dependency conflicts possible \u274c Manual profile switching \u274c No concurrent work  </p>"},{"location":"architecture/overview/#alternative-per-lab-venvs","title":"Alternative: Per-Lab venvs","text":"<p>\u274c More disk space \u274c More complex setup \u2705 Complete isolation \u2705 Different dependencies per lab \u2705 Automatic profile management \u2705 Concurrent work safe  </p> <p>When to migrate: See Current Setup Analysis</p>"},{"location":"architecture/overview/#migration-path","title":"Migration Path","text":""},{"location":"architecture/overview/#current-state-phase-1-single-venv","title":"Current State: Phase 1 (Single venv)","text":"<ul> <li>Shared utilities \u2705</li> <li>Central configuration \u2705</li> <li>Lab1 working \u2705</li> <li>Single venv \u2705</li> </ul>"},{"location":"architecture/overview/#future-phase-2-optional-migration-to-per-lab-venvs","title":"Future: Phase 2 (Optional migration to per-lab venvs)","text":"<p>When you hit: - 3+ labs - Dependency conflicts - Multiple team members - Production requirements</p> <p>Then consider: Per-lab venvs + automated profile management</p>"},{"location":"architecture/overview/#see-also","title":"See Also","text":"<ul> <li>Current Setup Details - Full analysis of single venv approach</li> <li>Shared vs Lab-Specific - What goes where</li> <li>Phase 1 Guide - Implementation details</li> </ul>"},{"location":"architecture/shared-vs-lab-specific/","title":"Shared vs Lab-Specific Data","text":""},{"location":"architecture/shared-vs-lab-specific/#overview","title":"Overview","text":"<p>In a multi-lab environment, some data is shared across labs, while other datasets remain lab-specific. Proper organization is crucial for maintainability and scalability.</p>"},{"location":"architecture/shared-vs-lab-specific/#lab-specific-data","title":"Lab-Specific Data","text":"<ul> <li>Stored within the lab\u2019s dedicated folder.</li> <li>Includes lab experiments, transformations, and temporary datasets.</li> <li>Changes affect only the corresponding lab.</li> </ul>"},{"location":"architecture/shared-vs-lab-specific/#shared-data","title":"Shared Data","text":"<ul> <li>Placed in a centralized <code>shared</code> directory.</li> <li>Includes:</li> <li>Standardized reference datasets (e.g., product catalogs, master lists)</li> <li>Common transformations or utility tables</li> <li>Any updates must consider impact on all labs consuming the shared data.</li> </ul>"},{"location":"architecture/shared-vs-lab-specific/#guidelines","title":"Guidelines","text":"<ol> <li>Only include truly reusable datasets in <code>shared</code>.</li> <li>Maintain versioning for shared datasets to prevent breaking changes.</li> <li>Document dependencies clearly in lab README files.</li> </ol>"},{"location":"architecture/shared-vs-lab-specific/#benefits","title":"Benefits","text":"<ul> <li>Prevents accidental data contamination.</li> <li>Encourages modularity and reuse.</li> <li>Simplifies debugging and troubleshooting across labs.</li> </ul>"},{"location":"getting-started/installation/","title":"Installation Guide","text":"<p>Complete setup instructions for BuildCPG Labs.</p>"},{"location":"getting-started/installation/#system-requirements","title":"System Requirements","text":"<ul> <li>Python: 3.11 or higher</li> <li>OS: Mac 11+ or Linux (Windows with WSL2)</li> <li>Memory: 2GB minimum</li> <li>Disk: 1GB for base installation + data</li> </ul>"},{"location":"getting-started/installation/#step-1-install-prerequisites","title":"Step 1: Install Prerequisites","text":""},{"location":"getting-started/installation/#install-homebrew-mac-only","title":"Install Homebrew (Mac Only)","text":"<pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n</code></pre>"},{"location":"getting-started/installation/#install-python-311","title":"Install Python 3.11+","text":"<p>Using Homebrew (Mac): <pre><code>brew install python@3.11\n</code></pre></p> <p>Using System Package Manager (Linux): <pre><code>sudo apt-get update\nsudo apt-get install python3.11 python3.11-venv\n</code></pre></p>"},{"location":"getting-started/installation/#verify-installation","title":"Verify Installation","text":"<pre><code>python3 --version\n# Should show: Python 3.11.x or higher\n\npip --version\n# Should show: pip 24.0 or higher\n</code></pre>"},{"location":"getting-started/installation/#step-2-clone-repository","title":"Step 2: Clone Repository","text":""},{"location":"getting-started/installation/#using-https","title":"Using HTTPS","text":"<pre><code>git clone https://github.com/narensham/buildcpg-labs.git\ncd buildcpg-labs\n</code></pre>"},{"location":"getting-started/installation/#or-using-ssh","title":"Or Using SSH","text":"<pre><code>git clone git@github.com:narensham/buildcpg-labs.git\ncd buildcpg-labs\n</code></pre>"},{"location":"getting-started/installation/#step-3-install-global-dependencies","title":"Step 3: Install Global Dependencies","text":"<p>These packages are needed at the root level:</p> <pre><code>pip install --upgrade pip\npip install pyyaml duckdb pandas mkdocs mkdocs-material\n</code></pre>"},{"location":"getting-started/installation/#step-4-verify-setup","title":"Step 4: Verify Setup","text":""},{"location":"getting-started/installation/#check-python","title":"Check Python","text":"<pre><code>python --version\n# Should show: Python 3.11.x or higher\n</code></pre>"},{"location":"getting-started/installation/#check-git","title":"Check Git","text":"<pre><code>git --version\n# Should show: git version 2.x or higher\n</code></pre>"},{"location":"getting-started/installation/#check-directory-structure","title":"Check Directory Structure","text":"<pre><code>ls -la\n# Should show: shared/, config/, lab1_sales_performance/, mkdocs.yml, etc.\n</code></pre>"},{"location":"getting-started/installation/#test-config","title":"Test Config","text":"<pre><code>python config/paths.py\n# Expected output:\n# \u2705 Lab1 config loaded: ...\n# \u2705 Lab1 DB path: /path/to/lab1_sales_performance/data/lab1_sales_performance.duckdb\n</code></pre>"},{"location":"getting-started/installation/#step-5-set-up-lab-1","title":"Step 5: Set Up Lab 1","text":""},{"location":"getting-started/installation/#create-lab-environment","title":"Create Lab Environment","text":"<pre><code>cd lab1_sales_performance\npython3 -m venv venv\nsource venv/bin/activate\n\n# If using Mac Zsh and venv doesn't activate:\nsource venv/bin/activate\n</code></pre>"},{"location":"getting-started/installation/#install-lab-dependencies","title":"Install Lab Dependencies","text":"<pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"getting-started/installation/#verify-dbt","title":"Verify dbt","text":"<pre><code>dbt --version\n# Should show: dbt version 1.x.x\n</code></pre>"},{"location":"getting-started/installation/#check-dbt-configuration","title":"Check dbt Configuration","text":"<pre><code>cd dbt\ndbt debug\n# Should show: \u2705 All checks passed!\n</code></pre>"},{"location":"getting-started/installation/#step-6-verify-everything-works","title":"Step 6: Verify Everything Works","text":""},{"location":"getting-started/installation/#test-data-inspector","title":"Test Data Inspector","text":"<pre><code>cd /path/to/buildcpg-labs/lab1_sales_performance\npython scripts/inspect_data.py\n# Should show: Schemas, tables, row counts\n</code></pre>"},{"location":"getting-started/installation/#test-csv-monitor","title":"Test CSV Monitor","text":"<pre><code>python scripts/check_for_new_data.py\n# Should show: CSV file info and last modification\n</code></pre>"},{"location":"getting-started/installation/#test-config-access","title":"Test Config Access","text":"<pre><code>cd /path/to/buildcpg-labs\npython config/paths.py\n# Should show: \u2705 Config loaded successfully\n</code></pre>"},{"location":"getting-started/installation/#alternative-automated-setup-script","title":"Alternative: Automated Setup Script","text":"<p>If you want to automate steps 1-5, create this script:</p> <p>File: <code>setup.sh</code> <pre><code>#!/bin/bash\nset -e\n\necho \"Setting up BuildCPG Labs...\"\n\n# Install global dependencies\necho \"Installing global dependencies...\"\npip install --upgrade pip\npip install pyyaml duckdb pandas mkdocs mkdocs-material\n\n# Setup lab1\necho \"Setting up lab1_sales_performance...\"\ncd lab1_sales_performance\npython3 -m venv venv\nsource venv/bin/activate\npip install -r requirements.txt\n\n# Verify\necho \"Verifying setup...\"\ncd dbt\ndbt debug\n\necho \"\u2705 Setup complete!\"\necho \"\"\necho \"Next steps:\"\necho \"  cd ../.. (go to root)\"\necho \"  cd lab1_sales_performance\"\necho \"  python scripts/inspect_data.py\"\n</code></pre></p> <p>Run it: <pre><code>chmod +x setup.sh\n./setup.sh\n</code></pre></p>"},{"location":"getting-started/installation/#troubleshooting-installation","title":"Troubleshooting Installation","text":""},{"location":"getting-started/installation/#python-version-error","title":"Python version error","text":"<pre><code># If python3 not found\nwhich python3\npython3 --version\n\n# Try python (might be Python 2)\npython --version\n</code></pre>"},{"location":"getting-started/installation/#pip-command-not-found","title":"pip command not found","text":"<pre><code># Use python -m pip instead\npython -m pip install pyyaml\n</code></pre>"},{"location":"getting-started/installation/#venv-activation-fails-on-mac","title":"venv activation fails on Mac","text":"<pre><code># Try direct path\nsource ./venv/bin/activate\n\n# Or use Python's venv module directly\npython -m venv venv\nsource venv/bin/activate\n</code></pre>"},{"location":"getting-started/installation/#dbt-debug-fails","title":"dbt debug fails","text":"<pre><code># Make sure you're in the dbt directory\ncd lab1_sales_performance/dbt\ndbt debug\n\n# If still fails, check dbt installation\npip show dbt-core dbt-duckdb\n</code></pre>"},{"location":"getting-started/installation/#permission-denied-on-setupsh","title":"Permission denied on setup.sh","text":"<pre><code>chmod +x setup.sh\n./setup.sh\n</code></pre>"},{"location":"getting-started/installation/#post-installation","title":"Post-Installation","text":"<p>After successful installation:</p> <ol> <li>Read Quick Start</li> <li>Read Architecture Overview</li> <li>Try your</li> </ol>"},{"location":"getting-started/quick-start/","title":"Quick Start Guide","text":"<p>Get up and running with BuildCPG Labs in 10 minutes.</p>"},{"location":"getting-started/quick-start/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11+</li> <li>Mac 11+ or Linux</li> <li>Git</li> <li>Basic terminal knowledge</li> </ul>"},{"location":"getting-started/quick-start/#installation","title":"Installation","text":""},{"location":"getting-started/quick-start/#1-clone-repository","title":"1. Clone Repository","text":"<pre><code>git clone https://github.com/narensham/buildcpg-labs.git\ncd buildcpg-labs\n</code></pre>"},{"location":"getting-started/quick-start/#2-install-dependencies","title":"2. Install Dependencies","text":"<pre><code>pip install pyyaml duckdb pandas\n</code></pre>"},{"location":"getting-started/quick-start/#3-verify-setup","title":"3. Verify Setup","text":"<pre><code>python config/paths.py\n# Output: \u2705 Lab1 config loaded: ...\n</code></pre>"},{"location":"getting-started/quick-start/#your-first-lab-run","title":"Your First Lab Run","text":""},{"location":"getting-started/quick-start/#setup-lab1-one-time","title":"Setup Lab1 (One Time)","text":"<pre><code>cd lab1_sales_performance\nmake setup\n# Creates venv, installs dependencies, runs dbt debug\n</code></pre>"},{"location":"getting-started/quick-start/#run-the-pipeline","title":"Run the Pipeline","text":"<pre><code>make run\n# Executes: dbt run\n</code></pre>"},{"location":"getting-started/quick-start/#inspect-your-data","title":"Inspect Your Data","text":"<pre><code>make inspect\n# Shows: schemas, tables, row counts, quality scores\n</code></pre>"},{"location":"getting-started/quick-start/#run-tests","title":"Run Tests","text":"<pre><code>make test\n# Executes: dbt test\n</code></pre>"},{"location":"getting-started/quick-start/#create-a-new-lab","title":"Create a New Lab","text":""},{"location":"getting-started/quick-start/#bootstrap-lab2","title":"Bootstrap Lab2","text":"<pre><code>cd ..\n./setup_new_lab.sh lab2_forecast_model\n</code></pre>"},{"location":"getting-started/quick-start/#use-lab2-immediately","title":"Use Lab2 Immediately","text":"<pre><code>cd lab2_forecast_model\nmake run\n</code></pre>"},{"location":"getting-started/quick-start/#common-commands","title":"Common Commands","text":""},{"location":"getting-started/quick-start/#working-on-lab1","title":"Working on Lab1","text":"<pre><code>cd lab1_sales_performance\n\nmake setup      # Initialize lab (one time)\nmake run        # Run dbt pipeline\nmake test       # Run dbt tests\nmake inspect    # Check data quality\nmake clean      # Clean build artifacts\nmake docs       # Generate dbt documentation\n</code></pre>"},{"location":"getting-started/quick-start/#across-all-labs","title":"Across All Labs","text":"<pre><code># Check all labs\nls -la | grep lab\n\n# Status of each lab\ncat config/labs_config.yaml\n\n# Check paths\npython config/paths.py\n</code></pre>"},{"location":"getting-started/quick-start/#what-happened","title":"What Happened?","text":"<p>When you ran <code>make setup</code> in lab1:</p> <ol> <li>Created venv - Isolated Python environment</li> <li>Installed dependencies - From requirements.txt</li> <li>Ran dbt debug - Verified dbt setup</li> </ol> <p>When you ran <code>make run</code>:</p> <ol> <li>Activated venv - Automatically (no need for <code>source venv/bin/activate</code>)</li> <li>Changed to dbt directory - <code>cd dbt</code></li> <li>Ran dbt run - Executed transformation pipeline</li> <li>Created/updated tables - In DuckDB database</li> </ol> <p>When you ran <code>make inspect</code>:</p> <ol> <li>Connected to database - lab1_sales_performance.duckdb</li> <li>Listed all schemas - raw, raw_bronze, raw_gold, raw_silver</li> <li>Showed table stats - Row counts, column counts</li> <li>Calculated quality - Checked for nulls, duplicates</li> </ol>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":"<ul> <li>Read Lab Structure to understand directory layout</li> <li>Read Shared vs Lab-Specific to understand how code is organized</li> <li>Read Creating New Lab for detailed lab creation guide</li> <li>Read Troubleshooting if you hit any issues</li> </ul>"},{"location":"getting-started/quick-start/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/quick-start/#command-not-found-make","title":"\"command not found: make\"","text":"<p>You need to install <code>make</code>. On Mac: <pre><code>xcode-select --install\n</code></pre></p>"},{"location":"getting-started/quick-start/#venv-not-found","title":"\"venv not found\"","text":"<p>Run <code>make setup</code> first to create the virtual environment.</p>"},{"location":"getting-started/quick-start/#dbt-command-not-found","title":"\"dbt: command not found\"","text":"<p>Make sure you ran <code>make setup</code> to install dbt in the venv.</p> <p>For more help, see Troubleshooting.</p>"},{"location":"phases/phase1-foundation/","title":"Phase 1: Foundation","text":"<p>Establish shared utilities and central configuration that all labs use.</p>"},{"location":"phases/phase1-foundation/#what-phase-1-delivers","title":"What Phase 1 Delivers","text":"<p>\u2705 Shared Utilities - DataInspector, CSVMonitor, Config Loaders \u2705 Central Configuration - Lab registry, path management \u2705 Lab1 Scripts - Data inspection and monitoring \u2705 Clean Git History - No build artifacts or venv  </p>"},{"location":"phases/phase1-foundation/#what-gets-created","title":"What Gets Created","text":"<pre><code>buildcpg-labs/\n\u251c\u2500\u2500 shared/                          \u2190 NEW\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 utils/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 data_inspector.py       # Database inspection\n\u2502   \u2502   \u251c\u2500\u2500 csv_monitor.py          # Detect new data\n\u2502   \u2502   \u2514\u2500\u2500 config_loader.py        # Load configurations\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 data_quality/\n\u2502   \u2502   \u251c\u2500\u2500 validators.py           # Validation rules\n\u2502   \u2502   \u2514\u2500\u2500 expectations.py         # Data expectations\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500 templates/                  \u2190 For Phase 2\n\u2502       \u2514\u2500\u2500 (templates will go here)\n\u2502\n\u251c\u2500\u2500 config/                          \u2190 NEW\n\u2502   \u251c\u2500\u2500 labs_config.yaml            # Lab registry\n\u2502   \u2514\u2500\u2500 paths.py                    # Path helpers\n\u2502\n\u2514\u2500\u2500 lab1_sales_performance/         \u2190 UPDATED\n    \u251c\u2500\u2500 scripts/\n    \u2502   \u251c\u2500\u2500 inspect_data.py         # NEW - uses shared utilities\n    \u2502   \u2514\u2500\u2500 check_for_new_data.py   # NEW - uses shared utilities\n    \u2514\u2500\u2500 .gitignore                  # NEW - ignore venv, artifacts\n</code></pre>"},{"location":"phases/phase1-foundation/#step-by-step-setup","title":"Step-by-Step Setup","text":""},{"location":"phases/phase1-foundation/#step-1-create-directory-structure","title":"Step 1: Create Directory Structure","text":"<pre><code>cd buildcpg-labs\nmkdir -p shared/utils\nmkdir -p shared/data_quality\nmkdir -p shared/templates\nmkdir -p config\n\n# Create __init__.py files\ntouch shared/__init__.py\ntouch shared/utils/__init__.py\ntouch shared/data_quality/__init__.py\n</code></pre>"},{"location":"phases/phase1-foundation/#step-2-create-shared-utilities","title":"Step 2: Create Shared Utilities","text":"<p>Create these files in <code>shared/utils/</code>:</p> <ul> <li><code>data_inspector.py</code> - Inspect databases</li> <li><code>csv_monitor.py</code> - Monitor CSV changes</li> <li><code>config_loader.py</code> - Load lab configurations</li> </ul> <p>See documentation links below.</p>"},{"location":"phases/phase1-foundation/#step-3-create-configuration","title":"Step 3: Create Configuration","text":"<p>Create these files in <code>config/</code>:</p> <ul> <li><code>labs_config.yaml</code> - Central lab registry</li> <li><code>paths.py</code> - Path helpers for accessing labs</li> </ul>"},{"location":"phases/phase1-foundation/#step-4-create-lab1-scripts","title":"Step 4: Create Lab1 Scripts","text":"<p>Create these files in <code>lab1_sales_performance/scripts/</code>:</p> <ul> <li><code>inspect_data.py</code> - Inspect lab1 database using shared DataInspector</li> <li><code>check_for_new_data.py</code> - Monitor lab1 CSV using shared CSVMonitor</li> </ul>"},{"location":"phases/phase1-foundation/#step-5-add-git-ignore","title":"Step 5: Add Git Ignore","text":"<p>Create <code>.gitignore</code> at root and <code>lab1_sales_performance/.gitignore</code></p>"},{"location":"phases/phase1-foundation/#step-6-test-everything-works","title":"Step 6: Test Everything Works","text":"<pre><code># Test shared utilities\npython shared/utils/data_inspector.py\npython shared/utils/csv_monitor.py\n\n# Test config\npython config/paths.py\n\n# Test lab1 scripts\ncd lab1_sales_performance\npython scripts/inspect_data.py\npython scripts/check_for_new_data.py\n</code></pre>"},{"location":"phases/phase1-foundation/#step-7-commit-to-git","title":"Step 7: Commit to Git","text":"<pre><code>git add shared/\ngit add config/\ngit add lab1_sales_performance/scripts/\ngit add .gitignore\ngit add lab1_sales_performance/.gitignore\n\ngit commit -m \"Phase 1: Create shared utilities and foundational structure\"\ngit push origin main\n</code></pre>"},{"location":"phases/phase1-foundation/#how-it-works","title":"How It Works","text":""},{"location":"phases/phase1-foundation/#shared-utilities","title":"Shared Utilities","text":"<p>Written once in <code>shared/</code>, used by all labs:</p> <pre><code># In lab1_sales_performance/scripts/inspect_data.py\nimport sys\nsys.path.insert(0, '../..')  # Go to root\nfrom shared.utils.data_inspector import DataInspector\n\ninspector = DataInspector('data/lab1_sales_performance.duckdb')\nquality = inspector.get_quality_score('gold', 'gold_orders_summary')\n</code></pre> <pre><code># In lab2_forecast_model/scripts/inspect_data.py (FUTURE)\nimport sys\nsys.path.insert(0, '../..')  # Go to root\nfrom shared.utils.data_inspector import DataInspector\n\ninspector = DataInspector('data/lab2_forecast_model.duckdb')\nquality = inspector.get_quality_score('gold', 'forecast_summary')\n# Same code, different database\n</code></pre>"},{"location":"phases/phase1-foundation/#central-configuration","title":"Central Configuration","text":"<p>All labs registered in one place:</p> <pre><code># config/labs_config.yaml\nlabs:\n  lab1_sales_performance:\n    path: lab1_sales_performance\n    db_path: lab1_sales_performance/data/lab1_sales_performance.duckdb\n    dbt_path: lab1_sales_performance/dbt\n\n  lab2_forecast_model:  # When created\n    path: lab2_forecast_model\n    db_path: lab2_forecast_model/data/lab2_forecast_model.duckdb\n    dbt_path: lab2_forecast_model/dbt\n</code></pre>"},{"location":"phases/phase1-foundation/#verification-checklist","title":"Verification Checklist","text":"<p>After Phase 1 completion, verify:</p> <ul> <li>[ ] <code>shared/</code> directory exists with utilities</li> <li>[ ] <code>config/</code> directory exists with labs_config.yaml and paths.py</li> <li>[ ] <code>lab1_sales_performance/scripts/inspect_data.py</code> works</li> <li>[ ] <code>lab1_sales_performance/scripts/check_for_new_data.py</code> works</li> <li>[ ] <code>python config/paths.py</code> returns \u2705</li> <li>[ ] <code>git status</code> shows clean working tree</li> <li>[ ] Changes committed to git</li> </ul>"},{"location":"phases/phase1-foundation/#whats-not-included-yet","title":"What's NOT Included Yet","text":"<p>Phase 1 focuses on foundation. These come later:</p> <ul> <li>\u274c Makefile (Phase 2)</li> <li>\u274c Bootstrap script (Phase 2)</li> <li>\u274c Orchestration/Airflow (Phase 3)</li> <li>\u274c Advanced monitoring (Phase 3+)</li> </ul>"},{"location":"phases/phase1-foundation/#troubleshooting-phase-1","title":"Troubleshooting Phase 1","text":""},{"location":"phases/phase1-foundation/#import-error-no-module-named-shared","title":"Import Error: \"No module named 'shared'\"","text":"<p>Make sure you're running scripts from the right directory: <pre><code>cd lab1_sales_performance\npython scripts/inspect_data.py  # Works\npython -c \"import scripts.inspect_data\"  # Also works\n</code></pre></p>"},{"location":"phases/phase1-foundation/#file-not-found-labs_configyaml","title":"File Not Found: \"labs_config.yaml\"","text":"<p>Verify the path exists: <pre><code>ls -la config/labs_config.yaml\n</code></pre></p>"},{"location":"phases/phase1-foundation/#datainspector-returns-empty-schemas","title":"DataInspector returns empty schemas","text":"<p>Database might not have tables yet. Create some with dbt: <pre><code>cd lab1_sales_performance/dbt\ndbt run\n</code></pre></p> <p>See Troubleshooting for more help.</p>"},{"location":"phases/phase1-foundation/#next-phase","title":"Next Phase","text":"<p>Phase 2 adds automation: - Makefile for standardized commands - Bootstrap script for creating labs - Testing framework</p> <p>See Phase 2: Automation</p>"}]}